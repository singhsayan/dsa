#include<iostream>
#include<vector>
#include<queue>
#include<unordered_map>
using namespace std;

void bfs(int startNode, vector<vector<int>>& isConnected, unordered_map<int, bool>& visited, int n) {
    queue<int> q;
    q.push(startNode);
    visited[startNode] = true;

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        for (int neighbor = 0; neighbor < n; neighbor++) {
            if (isConnected[current][neighbor] == 1 && !visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    int n;
    cout << "Enter size of matrix (number of cities): ";
    cin >> n;

    vector<vector<int>> isConnected(n, vector<int>(n));

    cout << "Enter the " << n << "x" << n << " matrix (0 or 1 values):" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> isConnected[i][j];
        }
    }

    unordered_map<int, bool> visited;
    int provinceCount = 0;

    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            provinceCount++;
            bfs(i, isConnected, visited, n);
        }
    }

    cout << "Number of provinces: " << provinceCount << endl;

    return 0;
}